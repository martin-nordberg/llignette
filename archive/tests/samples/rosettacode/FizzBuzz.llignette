fb: Package = (

    fizzBuzz1 :: "Using modulo arithmetic on each value",
    fizzBuzz1 = fn(count: Int64) -> String => (
        o = items.join('\n')
      where
        items = map(
            collection = 1..count,
            mapping = fn(i:Int64) -> String => (
                o = "FizzBuzz" when isFizz and isBuzz,
                o = "Fizz" when isFizz and not isBuzz,
                o = "Buzz" when not isFizz and isBuzz,
                o = "{{i}}" otherwise
              where
                isFizz = i mod 3 == 0,
                isBuzz = i mod 5 == 0
            )
        )
    )


    fizzBuzz2 :: "Using step-as-you-go logic #2, immutable values"
    fizzBuzz2 = fn(count: Int64) -> String => (
        o = result.answer
      where
        Result: Type = (
            answer: String,
            nextMultipleOf3,
            nextMultipleOf5,
            nextMultipleOf15,
        )

        start: Result = (
            answer = "",
            nextMultipleOf3 = 3,
            nextMultipleOf5 = 5,
            nextMultipleOf15 = 15,
        )

        result = reduce(
            startingValue = start,
            collection = 1..count,
            accumulator = fn(prior: Result, i: Int64) => (
                o = (
                    answer = "{{prior.answer}}FizzBuzz\n",
                    nextMultipleOf3 = prior.nextMultipleOf3 + 3,
                    nextMultipleOf5 = prior.nextMultipleOf5 + 5,
                    nextMultipleOf15 = prior.nextMultipleOf15 + 15,
                ) when i == nextMultipleOf15

                o = (
                    answer = "{{prior.answer}}Fizz\n",
                    nextMultipleOf3 = prior.nextMultipleOf3 + 3,
                    nextMultipleOf5 = prior.nextMultipleOf5,
                    nextMultipleOf15 = prior.nextMultipleOf15,
                ) when i == nextMultipleOf3

                o = (
                    answer = "{{prior.answer}}Buzz\n",
                    nextMultipleOf3 = prior.nextMultipleOf3,
                    nextMultipleOf5 = prior.nextMultipleOf5 + 5,
                    nextMultipleOf15 = prior.nextMultipleOf15,
                ) when i == nextMultipleOf5

                o = (
                    answer = "{{prior.answer}}{{i}}\n"
                    nextMultipleOf3 = prior.nextMultipleOf3,
                    nextMultipleOf5 = prior.nextMultipleOf5,
                    nextMultipleOf15 = prior.nextMultipleOf15,
                ) otherwise
            )
        )
    )

)